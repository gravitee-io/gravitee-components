{"version":3,"sources":["node_modules/@gravitee/components/atoms/gv-button.js"],"names":["classMap","LitElement","html","css","skeleton","GvIcons","GvButton","properties","disabled","type","Boolean","primary","outlined","icon","String","styles","render","modes","this","default","console","log","slot","getIcon","window","customElements","define"],"mappings":"mBAASA,MAAgB,wDAChBC,UAAYC,SAAMC,MAAW,iCAC7BC,MAAgB,8BAChBC,MAAe,2BAyBjB,MAAMC,iBAAiBL,EAE5BM,wBACE,MAAO,CACLC,SAAU,CAAEC,KAAMC,SAClBC,QAAS,CAAEF,KAAMC,SACjBE,SAAU,CAAEH,KAAMC,SAClBN,SAAU,CAAEK,KAAMC,SAClBG,KAAM,CAAEJ,KAAMK,SAIlBC,oBACE,MAAO,CACLX,EAEAD,CAAG,qkCAyGPa,SACE,MAAMC,EAAQ,CACZN,QAASO,KAAKP,QACdP,SAAUc,KAAKd,SACfe,SAAUD,KAAKP,QACfC,SAAUM,KAAKN,SACfC,OAAQK,KAAKL,MAIf,OADAO,QAAQC,IAAI,QAASH,KAAKI,KAAM,MAAOJ,KAAKL,MACrCX,CAAI,gCAEDF,EAASiB,kBACLC,KAAKV,UAAYU,KAAKd,aAEjCc,KAAKL,KAAOR,EAAQkB,QAAQL,KAAKL,KAAM,GAAIK,MAAQ,4BAO1DM,OAAOC,eAAeC,OAAO,YAAapB","sourcesContent":["import { classMap } from 'lit-html/directives/class-map.js';\nimport { LitElement, html, css } from 'lit-element';\nimport { skeleton } from '../styles';\nimport { GvIcons } from '../icons/gv-icons';\n\n/**\n * A button\n *\n * ## Details\n *\n * * attributes `primary` define the mode of the button and are exclusive.\n * * You can only set one mode at a time.\n * * When you don't use any of these values, the mode defaults to `default`.\n *\n * @fires click - Native click event from inner button element\n *\n * @slot - The content of the button (text or HTML)\n *\n * @attr {Boolean} primary - set button UI mode to primary\n * @attr {Boolean} disabled - same as native button element `disabled` attribute\n * @attr {Boolean} outlined - set button UI as outlined (white background instead of filled color)\n * @attr {Boolean} skeleton - enable skeleton screen UI pattern (loading hint)\n *\n * @cssprop {String} --gv-button - set the color of default button.\n * @cssprop {String} --gv-button-primary - set the color of primary button.\n * @cssprop {String} --gv-icon - set the color of icon\n */\n\nexport class GvButton extends LitElement {\n\n  static get properties () {\n    return {\n      disabled: { type: Boolean },\n      primary: { type: Boolean },\n      outlined: { type: Boolean },\n      skeleton: { type: Boolean },\n      icon: { type: String },\n    };\n  }\n\n  static get styles () {\n    return [\n      skeleton,\n      // language=CSS\n      css`\n          :host {\n              box-sizing: border-box;\n              display: inline-block;\n              margin: 0.2rem;\n              vertical-align: middle;\n          }\n\n          /* RESET */\n          button {\n              background: #fff;\n              border: 1px solid #000;\n              display: block;\n              font-size: 14px;\n              font-family: inherit;\n              margin: 0;\n              padding: 0;\n          }\n\n          /* BASE */\n          button {\n              border-radius: 0.15rem;\n              cursor: pointer;\n              min-height: 2rem;\n              padding: 0 0.5rem;\n              text-transform: uppercase;\n              -moz-user-select: none;\n              -webkit-user-select: none;\n              -ms-user-select: none;\n              user-select: none;\n              width: 100%;\n          }\n\n          /* COLORS */\n          button.default {\n              --btn-color: var(--gv-button, #333);\n          }\n\n          button.primary {\n              --btn-color: var(--gv-button-primary, #555);\n          }\n\n          /* MODES */\n          button {\n              background-color: var(--btn-color);\n              border-color: var(--btn-color);\n              color: #fff;\n          }\n\n          button.outlined {\n              background-color: #fff;\n              color: var(--btn-color);\n          }\n\n          /* special case: we want to keep simple buttons subtle */\n          button.simple {\n              border-color: #aaa;\n          }\n\n          /* STATES */\n          button:enabled:focus {\n              box-shadow: 0 0 0 .2em rgba(50, 115, 220, .25);\n              outline: 0;\n          }\n\n          button:enabled:hover {\n              box-shadow: 0 1px 3px #888;\n          }\n\n          button:enabled:active {\n              box-shadow: none;\n              outline: 0;\n          }\n\n          button:disabled {\n              cursor: default;\n              opacity: .5;\n          }\n\n          button.skeleton {\n              background-color: #aaa;\n              border-color: #777;\n              color: transparent;\n          }\n\n          /* TRANSITIONS */\n          button {\n              box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);\n              transition: all 75ms ease-in-out;\n          }\n\n          /* We can do this because we set a visible focus state */\n          button::-moz-focus-inner {\n              border: 0;\n          }\n\n          button.icon > * {\n              vertical-align: middle;\n              display: inline;\n          }\n        \n      `,\n    ];\n  }\n\n  render () {\n    const modes = {\n      primary: this.primary,\n      skeleton: this.skeleton,\n      default: !this.primary,\n      outlined: this.outlined,\n      icon: !!this.icon,\n    };\n\n    console.log('slot ', this.slot, ' / ', this.icon);\n    return html`<button\n        type=\"button\"\n      class=${classMap(modes)}\n      .disabled=${this.disabled || this.skeleton}>\n\n     ${this.icon ? GvIcons.getIcon(this.icon, 24, this) : ''}\n\n    <slot></slot></button>`;\n  }\n\n}\n\nwindow.customElements.define('gv-button', GvButton);\n"]}