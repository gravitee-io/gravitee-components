{"version":3,"sources":["node_modules/@gravitee/components/atoms/gv-input.js"],"names":["classMap","ifDefined","LitElement","html","css","skeleton","GvInput","properties","disabled","type","Boolean","required","value","String","label","placeholder","large","medium","small","styles","focus","this","shadowRoot","querySelector","_onInput","e","target","render","modes","labelHTML","inputId","inputType","includes","window","customElements","define"],"mappings":"mBAASA,MAAgB,uDAChBC,MAAiB,yDAEjBC,UAAYC,SAAMC,MAAW,iCAC7BC,MAAgB,+BAmBlB,MAAMC,gBAAgBJ,EAE3BK,wBACE,MAAO,CACLC,SAAU,CAAEC,KAAMC,SAClBC,SAAU,CAAEF,KAAMC,SAClBL,SAAU,CAAEI,KAAMC,SAClBE,MAAO,CAAEH,KAAMI,QACfC,MAAO,CAAEL,KAAMI,QACfE,YAAa,CAAEN,KAAMI,QACrBJ,KAAM,CAAEA,KAAMI,QACdG,MAAO,CAAEP,KAAMC,SACfO,OAAQ,CAAER,KAAMC,SAChBQ,MAAO,CAAET,KAAMC,UAInBS,oBACE,MAAO,CACLd,EAEAD,CAAG,kmBA8DPgB,QACEC,KAAKC,WAAWC,cAAc,UAAUH,QAG1CI,EAAUC,GACRJ,KAAKT,MAAQa,EAAEC,OAAOd,MAGxBe,SAEE,MAAMC,EAAQ,CACZvB,SAAUgB,KAAKhB,SACfW,MAAOK,KAAKL,MACZC,OAASI,KAAKJ,SAAYI,KAAKL,QAAUK,KAAKH,MAC9CA,MAAOG,KAAKH,OAGd,IAMIW,EACAC,EAPAC,EAAY,OAgBhB,MAfmB,CAAC,OAAQ,WAAY,SACvBC,SAASX,KAAKZ,QAC7BsB,EAAYV,KAAKZ,MAOjBoB,EAFER,KAAKP,MAEKX,CAAI,eADhB2B,EAAU,cAC+BT,KAAKP,QAAQO,KAAKV,SAAW,IAAM,aAGhER,CAAI,GAGXA,CAAI,GACP0B,iBAEM5B,EAAU6B,aACTC,iBACKV,KAAKV,wBACLU,KAAKb,UAAYa,KAAKhB,0BACpBJ,EAAUoB,KAAKN,wBACrBd,EAAUoB,KAAKT,kBACfZ,EAAS4B,eACRP,KAAKG,OAOtBS,OAAOC,eAAeC,OAAO,WAAY7B","sourcesContent":["import { classMap } from 'lit-html/directives/class-map.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\n\nimport { LitElement, html, css } from 'lit-element';\nimport { skeleton } from '../styles/skeleton.js';\n\n/**\n *\n * @fires click - Native click event from inner input element\n *\n * @attr {Boolean} disabled - same as native input element `disabled` attribute\n * @attr {Boolean} required - same as native input element `required` attribute\n * @attr {Boolean} skeleton - enable skeleton screen UI pattern (loading hint)\n * @attr {String} value - the value of the input\n * @attr {String} label - name of the label and id of the input\n * @attr {String} placeholder - an example value to display in the input when empty\n * @attr {String} type - type of the input. Can be text (Default), password or email.\n * @attr {Boolean} large - for a large input\n * @attr {Boolean} medium - for a medium input (Default)\n * @attr {Boolean} small - for a small input\n *\n */\n\nexport class GvInput extends LitElement {\n\n  static get properties () {\n    return {\n      disabled: { type: Boolean },\n      required: { type: Boolean },\n      skeleton: { type: Boolean },\n      value: { type: String },\n      label: { type: String },\n      placeholder: { type: String },\n      type: { type: String },\n      large: { type: Boolean },\n      medium: { type: Boolean },\n      small: { type: Boolean },\n    };\n  }\n\n  static get styles () {\n    return [\n      skeleton,\n      // language=CSS\n      css`        \n          /* BASE */\n          input {\n              border: 1px solid #D9D9D9;\n              box-sizing: border-box;\n              border-radius: 4px;\n              font-style: normal;\n              font-weight: normal;\n          }\n\n          /* SIZE */\n          input.large {\n            width: 256px;\n            height: 40px;\n            padding: 12px 8px;\n            font-size: 16px;\n            line-height: 24px;\n          }\n\n          input.medium {\n            width: 256px;\n            height: 32px;\n            padding: 12px 5px;\n            font-size: 14px;\n            line-height: 22px;\n          }\n\n          input.small {\n            width: 256px;\n            height: 24px;\n            font-size: 14px;\n            line-height: 22px;\n          }\n\n          /* STATES */\n          input:enabled:focus {\n              box-shadow: 0 0 0 .2em rgba(50, 115, 220, .25);\n              outline: 0;\n          }\n\n          input:enabled:hover {\n              box-shadow: 0 1px 3px #888;\n          }\n\n          input:enabled:active {\n              box-shadow: none;\n              outline: 0;\n          }\n\n          input:disabled {\n              cursor: default;\n              opacity: .5;\n          }\n\n          input.skeleton {\n              background-color: #aaa;\n              border-color: #777;\n          }\n      `,\n    ];\n  }\n\n  focus () {\n    this.shadowRoot.querySelector('.input').focus();\n  }\n\n  _onInput (e) {\n    this.value = e.target.value;\n  }\n\n  render () {\n\n    const modes = {\n      skeleton: this.skeleton,\n      large: this.large,\n      medium: (this.medium || (!this.large && !this.small)),\n      small: this.small,\n    };\n\n    var inputType = 'text';\n    var allowedTypes = ['text', 'password', 'email'];\n    if (allowedTypes.includes(this.type)) {\n      inputType = this.type;\n    }\n\n    var labelHTML;\n    var inputId;\n    if (this.label) {\n      inputId = 'inputId';\n      labelHTML = html`<label for=${inputId}>${this.label}${this.required ? '*' : ''}</label>`;\n    }\n    else {\n      labelHTML = html``;\n    }\n\n    return html`\n      ${labelHTML}\n      <input\n        .id=${ifDefined(inputId)}\n        type=${inputType}\n        .required=${this.required}\n        .disabled=${this.disabled || this.skeleton}\n        placeholder=${ifDefined(this.placeholder)}\n        value=${ifDefined(this.value)}\n        class=${classMap(modes)}\n        @input=${this._onInput}\n        >\n    `;\n  }\n\n}\n\nwindow.customElements.define('gv-input', GvInput);\n"]}